{"frames":[{"func":"get_breeding_records(behaviors = c(\"PE\")) %>% to_EBD_format() %>% \n    auk_unique() %>% filter(protocol_type != \"Banding\") %>% arrange(common_name)","file":"","line_number":0,"end_line_number":0,"character_number":0,"end_character_number":0},{"func":"arrange(., common_name)","file":"","line_number":0,"end_line_number":0,"character_number":0,"end_character_number":0},{"func":"filter(., protocol_type != \"Banding\")","file":"","line_number":0,"end_line_number":0,"character_number":0,"end_character_number":0},{"func":"auk_unique(.)","file":"","line_number":0,"end_line_number":0,"character_number":0,"end_character_number":0},{"func":"assertthat::assert_that(is.data.frame(x), assertthat::is.flag(checklists_only), \n    assertthat::is.string(group_id), group_id %in% names(x), \n    assertthat::is.string(checklist_id), checklist_id %in% names(x), \n    assertthat::is.string(species_id), checklists_only || species_id %in%  ...","file":"","line_number":0,"end_line_number":0,"character_number":0,"end_character_number":0},{"func":"see_if(..., env = env, msg = msg)","file":"","line_number":0,"end_line_number":0,"character_number":0,"end_character_number":0},{"func":"tryCatch({\n    eval(assertion, env)\n}, assertError = function(e) {\n    structure(FALSE, msg = e$message) ...","file":"","line_number":0,"end_line_number":0,"character_number":0,"end_character_number":0},{"func":"tryCatchList(expr, classes, parentenv, handlers)","file":"","line_number":0,"end_line_number":0,"character_number":0,"end_character_number":0},{"func":"tryCatchOne(expr, names, parentenv, handlers[[1L]])","file":"","line_number":0,"end_line_number":0,"character_number":0,"end_character_number":0},{"func":"doTryCatch(return(expr), name, parentenv, handler)","file":"","line_number":0,"end_line_number":0,"character_number":0,"end_character_number":0},{"func":"eval(assertion, env)","file":"","line_number":0,"end_line_number":0,"character_number":0,"end_character_number":0},{"func":"eval(assertion, env)","file":"","line_number":0,"end_line_number":0,"character_number":0,"end_character_number":0},{"func":"is.data.frame(x)","file":"","line_number":0,"end_line_number":0,"character_number":0,"end_character_number":0},{"func":"to_EBD_format(.)","file":"","line_number":0,"end_line_number":0,"character_number":0,"end_character_number":0},{"func":"str_to_lower(names(dataframe))","file":"C:/Users/skanderson/OneDrive - State of North Carolina/@@ncba/ncba/resources/ncba_functions.R","line_number":151,"end_line_number":151,"character_number":3,"end_character_number":52},{"func":"stri_trans_tolower(string, locale = locale)","file":"","line_number":0,"end_line_number":0,"character_number":0,"end_character_number":0},{"func":"get_breeding_records(behaviors = c(\"PE\"))","file":"C:/Users/skanderson/OneDrive - State of North Carolina/@@ncba/ncba/resources/ncba_functions.R","line_number":151,"end_line_number":151,"character_number":3,"end_character_number":52},{"func":"connection$find(fields = fields2, query = query) %>% unnest(cols = (c(OBSERVATIONS))) %>% \n    filter(BREEDING_CODE %in% behaviors)","file":"C:/Users/skanderson/OneDrive - State of North Carolina/@@ncba/ncba/resources/ncba_functions.R","line_number":1579,"end_line_number":1581,"character_number":5,"end_character_number":42},{"func":"filter(., BREEDING_CODE %in% behaviors)","file":"","line_number":0,"end_line_number":0,"character_number":0,"end_character_number":0},{"func":"unnest(., cols = (c(OBSERVATIONS)))","file":"","line_number":0,"end_line_number":0,"character_number":0,"end_character_number":0},{"func":"unnest.data.frame(., cols = (c(OBSERVATIONS)))","file":"","line_number":0,"end_line_number":0,"character_number":0,"end_character_number":0},{"func":"unpack(data = data, cols = all_of(cols), names_sep = names_sep, \n    names_repair = names_repair, error_call = error_call)","file":"","line_number":0,"end_line_number":0,"character_number":0,"end_character_number":0},{"func":"check_outer_inner_duplicate(cols, names(data), error_call = error_call)","file":"","line_number":0,"end_line_number":0,"character_number":0,"end_character_number":0},{"func":"cli::cli_abort(message, call = error_call)","file":"","line_number":0,"end_line_number":0,"character_number":0,"end_character_number":0},{"func":"rlang::abort(message, ..., call = call, use_cli_format = TRUE, \n    .frame = .frame)","file":"","line_number":0,"end_line_number":0,"character_number":0,"end_character_number":0},{"func":"signal_abort(cnd, .file)","file":"","line_number":0,"end_line_number":0,"character_number":0,"end_character_number":0},{"func":"stop(fallback)","file":"","line_number":0,"end_line_number":0,"character_number":0,"end_character_number":0}],"message":"Error in unnest(., cols = (c(OBSERVATIONS))) : \u001B[38;5;232m\n\u001B[31m✖\u001B[38;5;232m These names are duplicated:\n  \u001B[36mℹ\u001B[38;5;232m `NCBA_EBD_VER`, from `OBSERVATIONS`.\n\u001B[36mℹ\u001B[38;5;232m Use `names_sep` to disambiguate using the column name.\n\u001B[36mℹ\u001B[38;5;232m Or use `names_repair` to specify a repair strategy.\u001B[39m\n"}